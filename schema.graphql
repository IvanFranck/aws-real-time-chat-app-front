schema {
  query: Query
  mutation: Mutation
}

type Conversation {
  createdAt: AWSDateTime!
  id: ID!
  lastMessage: Message
  messages: [Message]
  participants: [User!]!
  updatedAt: AWSDateTime!
}

type Message {
  content: String!
  conversation: Conversation!
  id: ID!
  sender: User!
  timestamp: AWSDateTime!
}

type MessageConnection {
  items: [Message]
  nextToken: String
}

type Mutation {
  addContact(payload: addContactInput): User
  createConversation(payload: createConversationInput!): Conversation
  createUser(payload: createUserInput): User
  sendMessage(payload: sendMessageInput): Message
  updateUser(payload: updateUserInput): User
}

type Query {
  getConversation(id: getRessourceById!): Conversation
  getMessages(conversationId: getRessourceById!, limit: Int, nextToken: String): MessageConnection
  getUser(id: getRessourceById!): User
  getUserConversations(userId: getRessourceById!): [Conversation]
}

type Subscription {
  onNewMessage(conversationId: ID!): Message @aws_subscribe(mutations : ["sendMessage"])
}

type User {
  avatar: String
  contacts: [User]
  conversations: [Conversation]
  email: String!
  id: ID!
  username: String!
}

input addContactInput {
  avatar: String
  email: String
  id: ID!
  username: String
}

input createConversationInput {
  participantIds: [ID!]
}

input createUserInput {
  avatar: String
  email: String!
  username: String!
}

input getRessourceById {
  id: ID!
}

input sendMessageInput {
  content: String!
  conversationId: ID!
  senderId: ID!
}

input updateUserInput {
  avatar: String
  email: String
  id: ID!
  username: String
}
